apply plugin: 'java'
apply plugin: 'com.google.protobuf'
// Provide convenience executables for trying out the examples.
apply plugin: 'application'
// Inform IntelliJ projects about the generated code.
apply plugin: 'idea'

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.8'
    }
}

repositories {
    mavenCentral()
    mavenLocal()
}

// IMPORTANT: You probably want the non-SNAPSHOT version of gRPC. Make sure you
// are looking at a tagged version of the example and not "master"!

// Feel free to delete the comment at the next line. It is just for safely
// updating the version in our release process.
def grpcVersion = '1.16.1' // CURRENT_GRPC_VERSION

dependencies {
    compile "io.grpc:grpc-core:${grpcVersion}"
    compile "io.grpc:grpc-netty:${grpcVersion}"
    compile "io.grpc:grpc-protobuf:${grpcVersion}"
    compile "io.grpc:grpc-stub:${grpcVersion}"
    compile "io.fabric8:kubernetes-client:2.0.5"
    // https://github.com/grpc/grpc-java/issues/3633#issuecomment-340553225
    compile 'javax.annotation:javax.annotation-api:1.3.2'
//  compile project(':esri-geometry-api')
    compile files('/usr/local/lib/proj.jar')

//    compile files('../geometry-api-java-ex/build/libs/jackson-core-2.9.6.jar')
    compile files('/Users/davidraleigh/code/davidraleigh/geometry-api-java/build/libs/epl-geometry-api-2.2.3.jar')
    compile files('/Users/davidraleigh/code/geo-grpc/geometry-api-java-ex/build/libs/geometry-chain-2.2.3.jar')
//  compile files('/Users/davidraleigh/code/google/grpc-java/grpclb/build/libs/grpc-grpclb-1.2.0.jar')
//  compile 'com.esri.geometry:esri-geometry-api:1.2.1'

    testCompile "junit:junit:4.11"
    testCompile "org.mockito:mockito-core:1.9.5"
}

protobuf {
    protoc {
        artifact = "com.google.protobuf:protoc:3.7.1"
    }
    plugins {
        grpc {
            artifact = 'io.grpc:protoc-gen-grpc-java:1.20.0'
        }
    }
    generateProtoTasks {
        all()*.plugins {
            grpc {}
        }
    }
}




idea {
    module {
    // Not using generatedSourceDirs because of
    // https://discuss.gradle.org/t/support-for-intellij-2016/15294/8
    sourceDirs += file("${projectDir}/build/generated/source/proto/main/java");
    sourceDirs += file("${projectDir}/build/generated/source/proto/main/protobuf");
  }
}



startScripts.enabled = false

// help with defaultJvmOpts
//https://docs.gradle.org/current/dsl/org.gradle.jvm.application.tasks.CreateStartScripts.html
task geometryOperatorsServer(type: CreateStartScripts) {
    mainClassName = 'com.epl.protobuf.GeometryServer'
    applicationName = 'geometry-operators-server'
    outputDir = new File(project.buildDir, 'tmp')
    classpath = jar.outputs.files + project.configurations.runtime
    defaultJvmOpts = ['-Djava.library.path=/usr/local/lib/']
}

task geometryOperatorsClient(type: CreateStartScripts) {
    mainClassName = 'com.epl.protobuf.GeometryServiceClient'
    applicationName = 'geometry-operators-client'
    outputDir = new File(project.buildDir, 'tmp')
    classpath = jar.outputs.files + project.configurations.runtime
}


applicationDistribution.into('bin') {
    from(geometryOperatorsServer)
    from(geometryOperatorsClient)
    fileMode = 0755
}

tasks.withType(Test) {
    systemProperty "java.library.path", "/usr/local/lib/"
}


//task localAPICheck(type:Exec) {
//    workingDir './'
//
//    //on windows:
//    commandLine 'cmd', '/c', 'stop.bat'
//
//    //on linux
//    commandLine './local_api_check.sh'
//
//    //store the output instead of printing to the console:
//    standardOutput = new ByteArrayOutputStream()
//
//    //extension method stopTomcat.output() can be used to obtain the output:
//    ext.output = {
//        return standardOutput.toString()
//    }
//}
//
//test.finalizedBy(localAPICheck)
